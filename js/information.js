!function(e){function t(n){if(o[n])return o[n].exports;var i=o[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,t),i.l=!0,i.exports}var o={};t.m=e,t.c=o,t.d=function(e,o,n){t.o(e,o)||Object.defineProperty(e,o,{configurable:!1,enumerable:!0,get:n})},t.n=function(e){var o=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(o,"a",o),o},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=3)}([function(e,t,o){"use strict";function n(e){return new RegExp(/^(("[\w-+\s]+")|([\w-+]+(?:\.[\w-+]+)*)|("[\w-+\s]+")([\w-+]+(?:\.[\w-+]+)*))(@((?:[\w-+]+\.)*\w[\w-+]{0,66})\.([a-z]{2,6}(?:\.[a-z]{2})?)$)|(@\[?((25[0-5]\.|2[0-4][\d]\.|1[\d]{2}\.|[\d]{1,2}\.))((25[0-5]|2[0-4][\d]|1[\d]{2}|[\d]{1,2})\.){2}(25[0-5]|2[0-4][\d]|1[\d]{2}|[\d]{1,2})\]?$)/i).test(e)}function i(e){var t,o,n=!1;$("body").is("#layout--homepage")&&$(".section--introduction").length?(t=$(".section--introduction"),o=$(".section--introduction + .section"),n=!0):$("body").is(".module--projects")&&$(".section--highlight").length?(t=$(".section--highlight"),o=$(".section--body"),n=!0):$("body").is(".module--project")&&$(".section--cover").length&&(t=$(".section--cover"),o=$(".section--body"),n=!0),1==n&&(g&&!$("body").is(".module--projects")?new ScrollMagic.Scene({triggerElement:o,triggerHook:0}).setClassToggle(t,"hidden").addTo(e):g||new ScrollMagic.Scene({triggerElement:o,triggerHook:0}).setClassToggle(t,"z-index z-index--1 hidden").addTo(e))}function a(){function e(){var e=0;$(".layout--navigation .nav__li").each(function(t,o){e+=$(o).innerWidth()}),$("a",h).each(function(t,o){var n,i,a,r=$(o).attr("href"),c="#contact",s=0;$(r).length&&setTimeout(function(){r!=c||$("body").hasClass("footer--no-reveal")&&r==c?(n=$(r).innerHeight(),i=.5,a=r):r!=c||$("body").hasClass("footer--no-reveal")||(r="#network",n=$(c).innerHeight()+$("#layout--footer").innerHeight(),i=.5,s=$(r).height()+parseInt($(r).css("padding-top"),10),a=c),g||("#cropmark"==r?(s=e/2,n=$(r).innerHeight()-s):"#network"==r&&(n=$(r).height()+parseInt($(r).css("padding-top"),10))),new ScrollMagic.Scene({triggerElement:r,triggerHook:i,offset:s,duration:n}).setClassToggle('[data-target="'+a+'"]',"nav__li--active").addTo(w),new ScrollMagic.Scene({triggerElement:r,triggerHook:i,offset:s,duration:n}).setClassToggle(a,"section--active").addTo(w)},1e3)})}function t(){c=.5*$(window).height()}var o=$("#layout--homepage");if($(o).length){var n=$(".section--introduction",o),i=TweenMax.to(h,1.5,{delay:1.5,opacity:1,y:0}),a=$(".wrapper--scroll-down",n),r=TweenMax.to(a,1.5,{delay:3,opacity:1,y:0});new ScrollMagic.Scene({triggerElement:n}).triggerHook("onEnter").setTween(i).addTo(w),new ScrollMagic.Scene({triggerElement:a}).triggerHook("onEnter").setTween(r).addTo(w),e(),$(window).on("resize orientationchange",function(){e()});var c,n=$(".section--introduction",o),s=$(".section--introduction + .section",o),l=$("h1",m),d=TweenMax.to(l,.8,{opacity:.4}),u=$(".logo",l),p=TweenMax.to(u,.8,{opacity:1}),f=$(".wrapper--text",l),y=TweenMax.to(f,.4,{delay:.8,opacity:1,y:0,force3D:!0});t(),$(window).on("resize orientationchange",function(){t()}),new ScrollMagic.Scene({triggerElement:s}).triggerHook(.75).duration(c).setTween(d).addTo(w),new ScrollMagic.Scene({triggerElement:n}).triggerHook("onEnter").setTween(p).addTo(w),new ScrollMagic.Scene({triggerElement:n}).triggerHook("onEnter").setTween(y).addTo(w);var m=$(".type--webpage",o),v=$(".wrapper--header",m),T=TweenMax.to(v,1,{opacity:1,y:0}),b=$(".wrapper--body",m),x=TweenMax.to(b,1,{delay:.3,opacity:1,y:0});new ScrollMagic.Scene({triggerElement:v}).triggerHook("onEnter").setTween(T).addTo(w),new ScrollMagic.Scene({triggerElement:b}).triggerHook("onEnter").setTween(x).addTo(w);var S=$(".type--projects",o),k=$(".wrapper--header",S),M=TweenMax.to(k,1,{opacity:1,y:0}),C=$(".wrapper--body",S),E=TweenMax.to(C,1,{delay:.2,opacity:1,y:0}),H=$(".wrapper--footer",S),I=TweenMax.to(H,.8,{delay:.6,opacity:1,y:0}),j=$(".wrapper--controls",S),_=TweenMax.to(j,.4,{delay:1,opacity:1});new ScrollMagic.Scene({triggerElement:k}).triggerHook("onEnter").setTween(M).addTo(w),new ScrollMagic.Scene({triggerElement:C}).triggerHook("onEnter").setTween(E).addTo(w),new ScrollMagic.Scene({triggerElement:H}).triggerHook("onEnter").setTween(I).addTo(w),new ScrollMagic.Scene({triggerElement:j}).triggerHook("onEnter").setTween(_).addTo(w);var z=$(".type--team",o),A=$(".wrapper--header",z),L=TweenMax.to(A,1,{opacity:1,y:0}),P=$(".wrapper--body",z),D=TweenMax.to(P,1,{delay:.2,y:0});new ScrollMagic.Scene({triggerElement:A}).triggerHook("onEnter").setTween(L).addTo(w),new ScrollMagic.Scene({triggerElement:P}).triggerHook("onEnter").setTween(D).addTo(w);var O=$(".type--network",o),B=$(".wrapper--header",O),N=TweenMax.to(B,1,{opacity:1,y:0}),U=$(".wrapper--social a",O),W=TweenMax.staggerTo(U,.4,{delay:.4,opacity:1,y:0},.1),R=$(".wrapper--body",O),V=TweenMax.to(R,.6,{opacity:1,x:0}),K=$(".wrapper--controls",O),F=TweenMax.to(K,.4,{delay:1,opacity:1});new ScrollMagic.Scene({triggerElement:B}).triggerHook("onEnter").setTween(N).addTo(w),new ScrollMagic.Scene({triggerElement:U}).triggerHook("onEnter").setTween(W).addTo(w),new ScrollMagic.Scene({triggerElement:R}).triggerHook("onEnter").setTween(V).addTo(w),new ScrollMagic.Scene({triggerElement:K}).triggerHook("onEnter").setTween(F).addTo(w)}}function r(){var e=$("body"),t=$("#layout--footer"),o="footer footer--no-reveal";(e.is("#layout--projects")||e.is("#layout--project"))&&$("#layout--clients").outerHeight()+t.outerHeight()>$(window).height()||e.is("#layout--homepage")&&$(".section--contact").outerHeight()+t.outerHeight()>$(window).height()?e.addClass(o):e.hasClass(o)&&e.removeClass(o)}function c(){var e=$("body"),t=$(".section--body").first(),o=$(".section--medias").first(),n=$(".section--footer").first(),i=$(window).height()-$(t).outerHeight()-$(n).outerHeight()+"px";!$(e).is("#layout--project")||$(e).hasClass("footer--no-reveal")||$(t).hasClass("no-medias")?$(o).css("min-height",0,"important"):$(o).css("min-height",i,"important")}function s(){$("body").is("#layout--homepage")?($("#layout--homepage .type--contact").css("bottom",$("#layout--footer").outerHeight()+"px"),$("#layout--main").css("padding-bottom",$("#layout--homepage .type--contact").outerHeight()+$("#layout--footer").outerHeight()+"px")):$("#layout--main").css("padding-bottom",$("#layout--clients").outerHeight()+$("#layout--footer").outerHeight()+"px")}var l,d,g;$(window).on("resize orientationchange",function(){l=$(window).width()>=1400,l=$(window).width()>=1092&&$(window).width()<=1399,d=$(window).width()>=768&&$(window).width()<=1091,g=$(window).width()<768}).resize();var u=!1;!function(){var e="test",t=window.sessionStorage;try{t.setItem(e,"1"),t.removeItem(e),u=!0}catch(e){return!1}}(),window.viewportUnitsBuggyfill.init(),$(function(){var e=$(".wrapper--video, .wrapper--embed");e.each(function(){$(this).find('iframe[src^="http://player.vimeo.com"], iframe[src^="http://www.youtube.com"], object, embed, iframe').each(function(){$(this).attr("data-aspectRatio",this.height/this.width).removeAttr("height").removeAttr("width")})}),$(window).resize(function(){e.each(function(){var e=$(this),t=e.width();e.find('iframe[src^="http://player.vimeo.com"], iframe[src^="http://www.youtube.com"], object, embed, iframe').each(function(){var e=$(this);e.width(t).height(t*e.attr("data-aspectRatio"))})})}).resize()}),$(document).ready(function(){var e=$("#form--newsletter"),t=$("#mc--email"),o="active";t.on("keyup",function(){$(this).hasClass(o)||$(this).addClass(o),""==$(this).val()&&$(this).removeClass(o)}),e.submit(function(e){e.preventDefault();var t=$('input[type="email"]',o).val();if(!t||!n(t))return!1;var o=$(this),i=$('input[type="submit"], input[type="button"]',o);$formEmail=$('input[type="email"]',o),$formLabel=$("label",o),i.prop("disabled",!0).attr("type","button"),$formLabel.addClass("transparent"),$.ajax({type:"POST",url:"",data:$(this).serialize(),success:function(e){$formEmail.addClass("transparent").removeClass("active",function(){$formLabel.removeClass("transparent")}),e.success?setTimeout(function(){$formLabel.html("thank you for subscribing!"),$formEmail.prop("disabled",!0)},400):(setTimeout(function(){$formLabel.html("error&hellip; please try again!")},400),i.prop("disabled",!1).attr("type","submit").removeAttr("value"),setTimeout(function(){$formLabel.addClass("transparent",function(){$formEmail.addClass("active").removeClass("transparent")})},1e3))}})})}()),$(document).ready(function(){var e=!0;$(".scroll-off").each(function(t,o){$(o).on("tap click",function(){1==e&&($(this).removeClass("scroll-off"),e=!1)})})}),$(document).ready(function(){var e=$(".type--network"),t=$(".carousel",e),o=t.data("flickity"),n="control--disabled",i=Math.ceil($(".posts",t).length/5)-1,t=t.flickity({cellSelector:".posts",cellAlign:"right",contain:!0,groupCells:!0,imagesLoaded:!0,pageDots:!1,prevNextButtons:!1,initialIndex:i}),o=t.data("flickity"),a=$(".control--next",e),r=$(".control--prev",e);a.addClass("control--disabled"),t.on("select.flickity",function(){0==o.selectedIndex&&r.addClass(n),o.selectedIndex==o.slides.length-1?(a.addClass(n),r.removeClass(n)):a.removeClass(n)}),r.click(function(){t.flickity("previous")}),a.click(function(){t.flickity("next")})}()),$(document).ready(function(){var e=$(".type--projects"),t=$(".carousel",e),o="control--disabled",t=t.flickity({cellSelector:".project",cellAlign:"left",contain:!0,groupCells:!1,imagesLoaded:!0,pageDots:!1,prevNextButtons:!1}),n=t.data("flickity"),i=$(".control--next",e),a=$(".control--prev",e);a.addClass("control--disabled"),t.on("select.flickity",function(){var e=n.slides.length-2;g&&(e=n.slides.length-1),0==n.selectedIndex?a.addClass(o):n.selectedIndex>0&&n.selectedIndex<e?(a.removeClass(o),i.removeClass(o)):i.addClass(o)}),a.click(function(){t.flickity("previous")}),i.click(function(){t.flickity("next")})}());var p=!1;$(document).ready(function(){var e=new TimelineMax({repeat:-1}),t=".loader--website svg .rect";e.add(TweenMax.staggerFrom(t,.2,{y:0},.15)).add(TweenMax.staggerTo(t,.4,{y:20},.15)).add(TweenMax.staggerTo(t,.2,{y:0},.15))}),$(document).ready(function(){function e(e,t){n++,r=n/i,TweenLite.to(c,.7,{progress:r,ease:Linear.easeNone})}function t(){r=Math.round(100*c.progress()),$(".perc").text(r+"%")}function o(){(new TimelineMax).to($(".progress"),.3,{y:100,autoAlpha:0,ease:Back.easeIn}).to($(".loader--website svg, .loader--website .perc"),.3,{y:100,autoAlpha:0,ease:Back.easeIn},.1).set($(".wrapper--loader"),{className:"-=is--loading"}).to($(".loader--website"),.7,{yPercent:100,ease:Power4.easeInOut}).set($(".loader--website"),{className:"+=is--hidden"}),p=!0,setTimeout(function(){return a()},500)}var n=0,i=$("img, .wrapper--background > *").length,r=0,c=new TimelineMax({paused:!0,onUpdate:t,onComplete:o});TweenMax.to($(".loader--website svg, .loader--website .perc"),.6,{y:0,autoAlpha:1,ease:Back.easeIn,onComplete:function(t){$(".perc").text("0%").fadeIn(function(){0==i?($(".perc").text("100%"),setTimeout(function(){o()},200)):($("img, .wrapper--background > *").imagesLoaded({background:!0}).progress(function(t,o){e()}),t.to($(".progress span"),1,{width:100,ease:Linear.easeNone}))})}(c)})}),$(document).on("click",".scroll-down",function(e){var t=$(".section--body").length?$(".section--body")[0]:$(this).parent().closest(".section").next();w.scrollTo(function(e){TweenMax.to(window,.6,{scrollTo:{y:e+1,autoKill:!1},ease:Power2.easeOut})}),$(t).length>0&&(e.preventDefault(),w.scrollTo(t),window.history&&window.history.pushState&&$("body").is("#layout--homepage")&&history.pushState("",document.title,"#"+$(this).parent().closest(".section").next().attr("id")))}),$(document).ready(function(){var e=$(".wrapper--projects");if(e.length){var t=sessionStorage.getItem("filterSavedValue");if(void 0!==u&&1==u&&null!=t){e.mixItUp({load:{filter:t}}),$(".layout--navigation a").first().click(function(e){e.preventDefault,sessionStorage.removeItem("filterSavedValue")});var o=$(".wrapper--categories"),n="category__li--active";$(o).length&&$(".category__li--active",o).removeClass(n,function(){$('.category__li a[data-filter="'+t+'"]',o).parent().addClass(n)})}else e.mixItUp()}var i=$(".page--module .section--body .wrapper--categories"),a=$(".category__li",i),r=$("a",a),n="category__li--active";r.click(function(){if($this=$(this),$("."+n,i).removeClass(n,function(){$this.parents(a).first().addClass(n)}),void 0!==u&&1==u){var e=$(this).data("filter");sessionStorage.setItem("filterSavedValue",e)}})}());var w=new ScrollMagic.Controller;$(document).ready(function(e){function t(){c=.75*n.height()}function o(){a=g&&$(window).width()<$(window).height()?.25:!g&&$(window).width()<$(window).height()?.3:.5}var n,i,a,r,c=!1;$("body").is(".module--projects")&&$(".section--highlight").length?(n=$(".section--highlight"),$coverWrapper=$(".wrapper--content",n),i=$(".section--body"),r=!0):$("body").is(".module--project")&&$(".section--cover").length&&(n=$(".section--cover"),$coverWrapper=$(".wrapper--cover",n),i=$(".section--body"),r=!0),1==r&&(t(),$(window).on("resize orientationchange",function(){t()}),o(),$(window).on("resize orientationchange",function(){o()}),new ScrollMagic.Scene({triggerElement:i,triggerHook:a,duration:.75*n.height()}).setTween($coverWrapper,{opacity:.7}).addTo(e))}(w)),$(document).ready(i(w)),$(window).on("resize orientationchange",function(){i(w)});var h=$(".layout--navigation");$("#layout--homepage"),$(".module--projects"),$(".module--project");$(document).ready(function(){}),$(window).on("resize orientationchange",function(){}),$(document).ready(function(){var e=".page--details",t=null;if($("body").is("#layout--project")&&(g||(t=setInterval(function(){1==p&&(clearInterval(t),new ScrollMagic.Scene({triggerElement:e,triggerHook:.5,duration:$(e).height()}).setClassToggle(".layout--navigation .nav__li--active","nav__li--reverse").addTo(w))},300)),$("body").is("[data-cover]")&&!g)){var e=".page--details";adaptActiveSectionCoverColor=setInterval(function(){1==p&&(clearInterval(adaptActiveSectionCoverColor),new ScrollMagic.Scene({triggerElement:e,triggerHook:0}).setClassToggle("body","hidden--cover").addTo(w),new ScrollMagic.Scene({triggerElement:e,triggerHook:.5,duration:$(e).height()}).setClassToggle("body","reached--body").addTo(w))},300)}}),$(document).on("click",'.layout--navigation a[href^="#"]',function(e){var t=$(this).attr("href");if($(t).length>0){e.preventDefault();var o=$(".type--webpage"),n=parseInt(o.css("padding-top"),10),i=$(t).offset().top+1;"#projects"==t?i-=n:"#contact"!=t||$("body").hasClass("footer--no-reveal")?g&&"#contact"==t&&(i-=$(".layout--navigation").height()):i=$(".type--join").offset().top+$(".type--join").innerHeight(),TweenMax.to(window,.6,{scrollTo:{y:i,autoKill:!1},ease:Power1.easeInOut})}}),$(document).ready(function(){$(".reveal").each(function(e,t){var o=TweenMax.to(t,.4,{opacity:1,y:0});new ScrollMagic.Scene({triggerElement:t}).triggerHook("onEnter").setTween(o).addTo(w)})}),imgix.config.host="mying666.github.io/yzmedia",imgix.config.useHttps=!0,imgix.init({srcInputAttribute:"data-ix-src",pathInputAttribute:"data-ix-path",paramsInputAttribute:"data-ix-params",hostInputAttribute:"data-ix-host"}),$(document).ready(r()),$(window).on("resize orientationchange",function(){r()}),$(document).ready(c()),$(window).on("resize orientationchange",function(){c()}),$(document).ready(s()),$(window).on("resize orientationchange",function(){s()}),$(document).ready(function(){function e(e){setTimeout(function(){window.location.href=$(e).attr("href")},700)}$(".loader--website"),$(".wrapper--loader"),$('a[href^="'+location.protocol+"//"+window.location.hostname+'"]').each(function(t,o){$(o).click(function(t){t.preventDefault(),(new TimelineMax).to($(".loader--website"),.7,{yPercent:0,ease:Power4.easeInOut}).set($(".loader--website"),{className:"+=is--hidden",onComplete:e(o)})})});var t=$("svg .scene")[0];new Parallax(t)}),$(document).ready(function(){$("#formBtn").on("click",function(e){alert("暂无提交功能")})})},function(e,t){},,function(e,t,o){"use strict";o(0),o(1)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,